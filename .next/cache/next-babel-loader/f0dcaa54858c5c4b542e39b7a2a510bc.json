{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // Hook\n\nvar WindowSize = function WindowSize() {\n  _s();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      windowSize = _useState[0],\n      setWindowSize = _useState[1];\n\n  useEffect(function () {\n    // only execute all the code below in client side\n    if (true) {\n      // Handler to call on window resize\n      var handleResize = function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      }; // Add event listener\n\n\n      window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n      handleResize(); // Remove event listener on cleanup\n\n      return function () {\n        return window.removeEventListener(\"resize\", handleResize);\n      };\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n};\n\n_s(WindowSize, \"WMqaMVAPr0u8CJVTsAIdEuYrbbM=\");\n\n_c = WindowSize;\nexport default WindowSize;\n\nvar _c;\n\n$RefreshReg$(_c, \"WindowSize\");","map":{"version":3,"sources":["/home/tywa/Documents/Freelance/MySite/components/WindowSize.js"],"names":["React","useState","useEffect","WindowSize","width","undefined","height","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AACvB;AACA;AAFuB,kBAGaF,QAAQ,CAAC;AAC3CG,IAAAA,KAAK,EAAEC,SADoC;AAE3CC,IAAAA,MAAM,EAAED;AAFmC,GAAD,CAHrB;AAAA,MAGhBE,UAHgB;AAAA,MAGJC,aAHI;;AAQvBN,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,cAAmC;AACjC;AADiC,UAExBO,YAFwB,GAEjC,SAASA,YAAT,GAAwB;AACtB;AACAD,QAAAA,aAAa,CAAC;AACZJ,UAAAA,KAAK,EAAEM,MAAM,CAACC,UADF;AAEZL,UAAAA,MAAM,EAAEI,MAAM,CAACE;AAFH,SAAD,CAAb;AAID,OARgC,EAUjC;;;AACAF,MAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAXiC,CAajC;;AACAA,MAAAA,YAAY,GAdqB,CAgBjC;;AACA,aAAO;AAAA,eAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAN;AAAA,OAAP;AACD;AACF,GArBQ,EAqBN,EArBM,CAAT,CARuB,CA6Bf;;AACR,SAAOF,UAAP;AACD,CA/BD;;GAAMJ,U;;KAAAA,U;AAiCN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Hook\nconst WindowSize = () => {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // only execute all the code below in client side\n    if (typeof window !== 'undefined') {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n    \n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n     \n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n    \n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\nexport default WindowSize"]},"metadata":{},"sourceType":"module"}